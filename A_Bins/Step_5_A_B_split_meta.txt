Updated 6/12/2017 J. Connolly

# ##############General notes
# All hard coded columns are purposefully, these are new columns used for tracking
# This script will apply the a/b splits to the huc2 a/b based on precipitation data with guidance from the team
# input a_b split table generated by Step_A1_split_HUC2_A_B and Step_A2_splitHUC2_A_B_Summarize
# HUC2 that were modelled in the PWC using multiple MET stations due to precipitation difference across the HUC

# ******** When loading in tables that have huc12 the leading 0 is often dropped.  Must set column as str and updated to
#  include the 0***********

############### User input variables
Input Sources: User driven, LongBins_[date].csv from Step_4_Transform_binTable_long, AllHUC_a_b.csv from
Step_A2_splitHUC2_A_B_Summarize, R_AllSpe_FWS_NMFS_ByHUC12_[date].txt from Step_B1_GenerateHUC12_Crosswalk

# ############## ASSUMPTIONS
1) Col order has not changed since step 1
2) Long bin table is used a master for entity id and huc2 header names
3) Master huc12/ab split is used for huc12 header names
4) Col header in long bin table should be used as output header for final data frame
########################################################################################################################

# Step 1: Load data from bin table long format, removed unnamed columns. Try/Excepts makes sure we have a complete
# archive of data used for update,and intermediate tables.

# Step 2: Set up dictionaries used for a/b assignments. dict_a_b_split is a dictionary by huc2 including the a/b
# assignments, ie there is 17a and 17b not 17, key is the huc_2, values is a data frame and the huc_12_crosswalk_dict is
# a dictionary of all huc12 in a species range; key is the entity id value HUC12s

# Step 3: Compares species huc 12 crosswalk to master huc12  a/b split crosswalk to see if a species is found in a, b or
# both for hucs in the l48

Adds two columns to data frame A and B. For each row of data will append and a or b in the A or B columns. A and B
columns as the grouping columns for the 'melt' so there is a unique row of data for each group (A/B) the species is
found in.

The melt function transforms DataFrame from wide to long where one or more columns are identifier variables (id_vars),
while all other columns, considered measured variables (value_vars), are 'unpivoted' to the row axis, leaving just two
non-identifier columns,'variable' and 'value'

# Step 4: For nl48 HUC2 all species are placed in both the a and b huc2, function places each species in these  huc2s
# into both a and b

There are no HUC12s to use as surrogates for the a/b as a way to break up the HUC.  For this reason all species are
assumed to be in both A and B of the HUC2.

The melt function transforms DataFrame from wide to long where one or more columns are identifier variables (id_vars),
while all other columns, considered measured variables (value_vars), are 'unpivoted' to the row axis, leaving just two
non-identifier columns,'variable' and 'value'

# Step 5: Merge the l48 and nl48 a/b split data frames with the remaining data for the hucs in the l48 w/o an a_b split
# append is the same as concat bu can only add data along axis=0 ie rows

Merges the l48 and nl48 data frames and re-orders columns to match the long_bins_nm table LongBins_[date].csv input
# Step 6:Exports transformed data frame to csv
df_final.to_csv(out_table)

Reference URLs
https://pandas.pydata.org/pandas-docs/stable/generated/pandas.melt.html
